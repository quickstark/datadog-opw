# At the top of the file, add a comment about organization secrets
# This workflow uses both repository secrets (project-specific) and organization secrets (shared infrastructure)
# 
# Organization Secrets (set once, used everywhere):
# - SYNOLOGY_HOST, SYNOLOGY_SSH_PORT, SYNOLOGY_USER, SYNOLOGY_SSH_KEY
# - DOCKERHUB_USER, DOCKERHUB_TOKEN
#
# Repository Secrets (project-specific):
# - DD_OPW_API_KEY, DD_OP_PIPELINE_ID
# - Any project-specific database credentials, etc.

name: Build and Deploy Datadog OPW
on:
  workflow_dispatch:  # Allow manual triggering
  push:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'opw-config/**'
      - 'scripts/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'Dockerfile'
      - 'opw-config/**'
      - 'scripts/**'
      - '.github/workflows/**'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # Install Datadog CI for deployment tracking
      - name: Install Datadog CI
        run: |
          npm install -g @datadog/datadog-ci
          datadog-ci version
      
      # Build and push custom OPW image
      - name: Build and push Datadog OPW image
        id: docker_build_opw
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64  # Synology DS923+ AMD64 compatibility
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USER }}/dd-opw:latest
            ${{ secrets.DOCKERHUB_USER }}/dd-opw:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ steps.meta.outputs.date }}
      
      # Validate configuration files
      - name: Validate OPW configuration files
        run: |
          echo "Validating OPW configuration files..."
          
          # Check if required files exist
          if [ ! -f "Dockerfile" ]; then
            echo "‚ùå Dockerfile not found"
            exit 1
          fi
          
          # Basic YAML syntax validation for OPW configs
          if [ -d "opw-config" ]; then
            for config_file in opw-config/**/*.yaml opw-config/**/*.yml; do
              if [ -f "$config_file" ]; then
                echo "Validating $config_file..."
                python -c "import yaml; yaml.safe_load(open('$config_file'))" || {
                  echo "‚ùå $config_file has invalid YAML syntax"
                  exit 1
                }
              fi
            done
          fi
          
          echo "‚úÖ All configuration files are valid"
      
      # Copy configuration files to Synology
      - name: Copy configuration files to Synology
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SYNOLOGY_SSH_KEY }}
          source: "opw-config/*"
          target: "/tmp/datadog-opw-config/"
          strip_components: 0

      # Deploy to Synology
      - name: Deploy Datadog OPW to Synology
        id: synology_deploy
        uses: appleboy/ssh-action@v1.0.3
        if: steps.docker_build_opw.outcome == 'success' && github.ref == 'refs/heads/main'
        with:
          host: ${{ secrets.SYNOLOGY_HOST }}
          port: ${{ secrets.SYNOLOGY_SSH_PORT }}
          username: ${{ secrets.SYNOLOGY_USER }}
          key: ${{ secrets.SYNOLOGY_SSH_KEY }}
          script: |
            # Debug: Environment setup
            echo "üîß Setting up deployment environment..."
            echo "Current user: $(whoami)"
            echo "Current directory: $(pwd)"
            
            # Find Docker command
            if [ -f /usr/local/bin/docker ]; then
              DOCKER_CMD="/usr/local/bin/docker"
            elif [ -f /usr/bin/docker ]; then
              DOCKER_CMD="/usr/bin/docker"
            elif command -v docker >/dev/null 2>&1; then
              DOCKER_CMD="docker"
            else
              echo "‚ùå Docker not found"
              exit 1
            fi
            
            # Check Docker permissions
            if $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "‚úÖ Docker accessible without sudo"
            elif sudo $DOCKER_CMD --version >/dev/null 2>&1; then
              echo "‚úÖ Docker accessible with sudo"
              DOCKER_CMD="sudo $DOCKER_CMD"
            else
              echo "‚ùå Cannot access Docker"
              exit 1
            fi
            
            echo "Using Docker: $DOCKER_CMD"
            echo "Note: Using standalone Docker deployment (no docker-compose needed)"
            
            # Set up Datadog OPW directory structure
            OPW_DIR="/volume1/docker/datadog-opw"
            echo "üìÅ Setting up Datadog OPW directory structure..."
            
            # Create main OPW directory
            sudo mkdir -p "$OPW_DIR"
            sudo chown $(whoami):users "$OPW_DIR"
            
            # Create OPW data directory
            sudo mkdir -p "$OPW_DIR/data"
            sudo chown -R $(whoami):users "$OPW_DIR"
            
            # Copy OPW configuration files from temp location
            echo "üìã Copying OPW configuration files..."
            if [ -d "/tmp/datadog-opw-config" ]; then
              # Copy OPW configuration files
              if [ -d "/tmp/datadog-opw-config/opw-config" ]; then
                cp -r /tmp/datadog-opw-config/opw-config/* "$OPW_DIR/" 2>/dev/null || echo "No OPW config files to copy"
                echo "‚úÖ Copied OPW configurations"
              fi
              
              # Clean up temp files
              rm -rf "/tmp/datadog-opw-config"
            else
              echo "‚ö†Ô∏è  No OPW configuration files found in temp location"
            fi
            
            # Set proper permissions on OPW config files
            find "$OPW_DIR" -name "*.yaml" -exec chmod 644 {} \; 2>/dev/null || echo "No YAML files to set permissions"
            
            # Login to Docker Hub
            echo "üîê Logging into Docker Hub..."
            if ! echo "${{ secrets.DOCKERHUB_TOKEN }}" | $DOCKER_CMD login --username "${{ secrets.DOCKERHUB_USER }}" --password-stdin; then
              echo "‚ùå Failed to login to Docker Hub"
              exit 1
            fi
            
            # Pull the latest OPW image
            echo "üì• Pulling latest Datadog OPW image..."
            $DOCKER_CMD pull ${{ secrets.DOCKERHUB_USER }}/dd-opw:latest
            
            # Stop existing OPW container (don't touch Agent)
            echo "üõë Stopping existing Datadog OPW..."
            $DOCKER_CMD stop dd-opw || echo "No existing dd-opw container to stop"
            $DOCKER_CMD rm dd-opw || echo "No existing dd-opw container to remove"
            
            # Clean up old OPW resources
            echo "üßπ Cleaning up old OPW resources..."
            $DOCKER_CMD container prune -f
            $DOCKER_CMD image prune -f
            
            # Deploy Datadog OPW
            echo "üöÄ Starting Datadog OPW..."
            $DOCKER_CMD run -d \
              --name dd-opw \
              --restart unless-stopped \
              --network host \
              -e DD_OPW_API_KEY=${{ secrets.DD_OPW_API_KEY }} \
              -e DD_OP_PIPELINE_ID=${{ secrets.DD_OP_PIPELINE_ID }} \
              -e DD_SITE=datadoghq.com \
              -e DD_OP_SOURCE_DATADOG_AGENT_ADDRESS=0.0.0.0:8282 \
              -e DD_OP_CONFIG_SOURCE=datadog \
              -e DD_LOG_LEVEL=debug \
              -e RUST_LOG=info,observability_pipelines_worker=debug,vector=debug \
              -e DD_OP_API_ENABLED=true \
              -e DD_OP_API_ADDRESS=0.0.0.0:8686 \
              -v /volume1/docker/datadog-opw/data:/var/lib/datadog/observability-pipelines-worker \
              -p 8282:8282/tcp \
              -p 8686:8686/tcp \
              --label "deployment.timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
              --label "deployment.source=github-actions" \
              --label "deployment.commit=${{ github.sha }}" \
              --label "deployment.repository=${{ github.repository }}" \
              ${{ secrets.DOCKERHUB_USER }}/dd-opw:latest
            
            # Wait for OPW service to be ready
            echo "‚è≥ Waiting for Datadog OPW to start..."
            sleep 20
            
            # Verify OPW service is running
            echo "üîç Verifying Datadog OPW status..."
            if $DOCKER_CMD ps | grep -q "dd-opw.*Up"; then
              echo "‚úÖ Datadog OPW is running"
            else
              echo "‚ùå Datadog OPW failed to start"
              $DOCKER_CMD logs dd-opw
              exit 1
            fi
            
            # Check OPW health
            echo "üè• Performing OPW health checks..."
            
            # Wait a bit more for OPW to fully start
            sleep 10
            
            if curl -f http://localhost:8686/health 2>/dev/null; then
              echo "‚úÖ Datadog OPW health check passed"
            else
              echo "‚ö†Ô∏è  Datadog OPW health check failed - checking logs..."
              $DOCKER_CMD logs dd-opw --tail 20
            fi
            
            # Show final status
            echo "üìä Final OPW service status:"
            $DOCKER_CMD ps --filter "name=dd-opw"
            
            echo "üéâ Datadog OPW deployment completed successfully!"
            echo "üìç OPW API: http://localhost:8686/health"
            echo "üìç OPW Listening: http://localhost:8282 (Ready to receive logs from Agent)"
      
      # Mark deployment in Datadog (only for main branch)
      - name: Mark OPW Deployment in Datadog
        if: steps.synology_deploy.outcome == 'success' && github.ref == 'refs/heads/main'
        env:
          DD_API_KEY: ${{ secrets.DD_OPW_API_KEY }}
          DD_SITE: datadoghq.com
          DD_BETA_COMMANDS_ENABLED: 1
        run: |
          REVISION="${{ github.sha }}"
          SHORT_SHA="${REVISION:0:7}"
          DEPLOY_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          
          echo "üìä Marking Datadog OPW deployment..."
          echo "Environment: infrastructure"
          echo "Service: datadog-opw"
          echo "Revision: $SHORT_SHA"
          echo "Deploy Time: $DEPLOY_TIME"
          
          # Mark the OPW deployment
          datadog-ci deployment mark \
            --env "infrastructure" \
            --service "datadog-opw" \
            --revision "$SHORT_SHA" \
            --tags "deployment_method:github_actions" \
            --tags "repository:${{ github.repository }}" \
            --tags "branch:${{ github.ref_name }}" \
            --tags "actor:${{ github.actor }}" \
            --tags "workflow:${{ github.workflow }}" \
            --tags "run_id:${{ github.run_id }}" \
            --tags "deploy_time:$DEPLOY_TIME" \
            --tags "component:log_processing" \
            --tags "infrastructure:synology" \
            --no-fail || echo "‚ö†Ô∏è  Failed to mark OPW deployment in Datadog (non-blocking)"
          
          echo "‚úÖ OPW deployment marked in Datadog successfully!"
      
      # Notification on failure
      - name: Notify on Failure
        if: failure()
        run: |
          echo "‚ùå Datadog OPW deployment failed!"
          echo "Please check the logs and configuration files."
          echo "Common issues:"
          echo "- Docker Hub authentication"
          echo "- SSH connection to Synology"
          echo "- Invalid YAML configuration"
          echo "- Missing secrets (DD_OPW_API_KEY, DD_OP_PIPELINE_ID)"
          echo "- Missing Dockerfile" 